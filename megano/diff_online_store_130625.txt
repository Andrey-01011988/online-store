diff --git a/megano/api_product/admin.py b/megano/api_product/admin.py
index b070c89..44b3f70 100644
--- a/megano/api_product/admin.py
+++ b/megano/api_product/admin.py
@@ -196,6 +196,9 @@ class SpecificationAdmin(admin.ModelAdmin):
     ordering = ("id",)
     search_fields = ("name", "value", "product__title")
 
+    def get_queryset(self, request):
+        return super().get_queryset(request).select_related("product")
+
     def product_link(self, obj):
         if obj.product:
             url = reverse("admin:api_product_product_change", args=[obj.product.id])
diff --git a/megano/api_product/management/commands/create_products.py b/megano/api_product/management/commands/create_products.py
index 53c3000..8fbb69c 100644
--- a/megano/api_product/management/commands/create_products.py
+++ b/megano/api_product/management/commands/create_products.py
@@ -1,3 +1,4 @@
+import json
 from django.core.management import BaseCommand
 from django.core.files import File
 from pathlib import Path
@@ -6,7 +7,7 @@ from api_product.models import Product, Category, Tag, ProductImage, Specificati
 
 class Command(BaseCommand):
     """
-    Mass create or update products with images and related data.
+    Mass create or update products with images and related data from external file.
     """
 
     def add_arguments(self, parser):
@@ -16,55 +17,43 @@ class Command(BaseCommand):
             required=True,
             help='Путь к папке с изображениями для продуктов'
         )
+        parser.add_argument(
+            '--products_file',
+            type=str,
+            required=True,
+            help='Путь к JSON-файлу с данными о продуктах'
+        )
 
     def handle(self, *args, **options):
         images_dir = Path(options['images_dir'])
+        products_file = Path(options['products_file'])
+
         if not images_dir.exists() or not images_dir.is_dir():
             self.stdout.write(self.style.ERROR(f"Папка {images_dir} не найдена!"))
             return
+        if not products_file.exists() or not products_file.is_file():
+            self.stdout.write(self.style.ERROR(f"Файл {products_file} не найден!"))
+            return
 
         self.stdout.write(f"Start creating or updating products. Images dir: {images_dir}")
 
-        products_data = [
-            {
-                "title": "Laptop",
-                "description": "High-performance laptop",
-                "fullDescription": "A laptop with high specs for professionals.",
-                "price": 2399.99,
-                "count": 10,
-                "category": "Electronics",
-                "freeDelivery": True,
-                "tags": ["computers", "portable"],
-                "images": ["laptop1.jpg", "laptop2.jpg"],
-                "specifications": [
-                    {"name": "CPU", "value": "Intel i7"},
-                    {"name": "RAM", "value": "16GB"},
-                ],
-            },
-            {
-                "title": "Smartphone",
-                "description": "Latest model smartphone",
-                "fullDescription": "Flagship smartphone with AMOLED display.",
-                "price": 987.50,
-                "count": 25,
-                "category": "Electronics",
-                "freeDelivery": False,
-                "tags": ["mobile", "touchscreen"],
-                "images": ["smartphone1.jpg"],
-                "specifications": [
-                    {"name": "Screen", "value": "6.5 inch"},
-                    {"name": "Battery", "value": "4000mAh"},
-                ],
-            },
-        ]
+        with open(products_file, "r", encoding="utf-8") as f:
+            products_data = json.load(f)
 
         for prod_data in products_data:
-            # Категория (объект)
-            category, _ = Category.objects.get_or_create(title=prod_data["category"])
+            # Категория и подкатегория
+            category, _ = Category.objects.get_or_create(title=prod_data["category"], parent=None)
+            subcategory = None
+            if "subcategory" in prod_data and prod_data["subcategory"]:
+                subcategory, _ = Category.objects.get_or_create(title=prod_data["subcategory"], parent=category)
+                category_obj = subcategory
+            else:
+                category_obj = category
+
             # Теги
             tag_objs = []
             for tag_title in prod_data["tags"]:
-                tag, _ = Tag.objects.get_or_create(title=tag_title)
+                tag, _ = Tag.objects.get_or_create(name=tag_title)
                 tag_objs.append(tag)
 
             # Создание или обновление продукта
@@ -75,7 +64,7 @@ class Command(BaseCommand):
                     "fullDescription": prod_data.get("fullDescription"),
                     "price": prod_data["price"],
                     "count": prod_data["count"],
-                    "category": category,
+                    "category": category_obj,
                     "freeDelivery": prod_data["freeDelivery"],
                 }
             )
@@ -84,10 +73,7 @@ class Command(BaseCommand):
             else:
                 updated = False
                 for field in ["description", "fullDescription", "price", "count", "category", "freeDelivery"]:
-                    if field == "category":
-                        new_value = category
-                    else:
-                        new_value = prod_data.get(field, getattr(product, field))
+                    new_value = category_obj if field == "category" else prod_data.get(field, getattr(product, field))
                     if getattr(product, field) != new_value:
                         setattr(product, field, new_value)
                         updated = True
@@ -131,4 +117,4 @@ class Command(BaseCommand):
 
         self.stdout.write(self.style.SUCCESS("Products created or updated successfully."))
 
-# python manage.py create_products --images_dir /home/uservm/python_django_diploma/explanations/images
+#  venvuservm@uservm-VirtualBox:~/python_django_diploma/megano$ python manage.py create_products --images_dir /home/uservm/python_django_diploma/explanations/images --products_file /home/uservm/python_django_diploma/explanations/data/products.json
diff --git a/megano/api_product/models.py b/megano/api_product/models.py
index 012afa4..410bc24 100644
--- a/megano/api_product/models.py
+++ b/megano/api_product/models.py
@@ -213,4 +213,4 @@ class Specification(models.Model):
         verbose_name_plural = "Характеристики"
 
     def __str__(self):
-        return f"{self.product}, {self.name}, {self.value}"
+        return f"{self.name}, {self.value}"
diff --git a/megano/api_product/views.py b/megano/api_product/views.py
index b8ee2c7..8b4a1eb 100644
--- a/megano/api_product/views.py
+++ b/megano/api_product/views.py
@@ -2,7 +2,7 @@ import logging
 
 from django.db import IntegrityError
 
-from rest_framework import status
+from rest_framework import status, permissions
 from rest_framework.generics import RetrieveAPIView, ListAPIView
 from rest_framework.views import APIView
 from rest_framework.request import Request
@@ -13,7 +13,6 @@ from drf_spectacular.utils import extend_schema
 from .models import Product, Review, Tag
 from .serializers import ProductDetailSerializer, ReviewSerializer, TagSerializer
 
-
 logger = logging.getLogger(__name__)
 
 
@@ -36,6 +35,8 @@ class ProductDetailAPIView(RetrieveAPIView):
 
 @extend_schema(tags=["product"], responses=ReviewSerializer)
 class ReviewAPIView(APIView):
+    permission_classes = [permissions.IsAuthenticated]
+
     def post(self, request: Request, id: int):
         logger.debug(
             "ReviewAPIView POST: product_id=%s, data=%s, user=%s",
